{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\martinezma\\\\Desktop\\\\Projects\\\\Learn-React\\\\scoreboard\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\martinezma\\\\Desktop\\\\Projects\\\\Learn-React\\\\scoreboard\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\martinezma\\\\Desktop\\\\Projects\\\\Learn-React\\\\scoreboard\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\martinezma\\\\Desktop\\\\Projects\\\\Learn-React\\\\scoreboard\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\martinezma\\\\Desktop\\\\Projects\\\\Learn-React\\\\scoreboard\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\martinezma\\\\Desktop\\\\Projects\\\\Learn-React\\\\scoreboard\\\\src\\\\components\\\\Stopwatch.js\";\nimport React, { Component } from 'react';\n\nvar Stopwatch =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Stopwatch, _Component);\n\n  function Stopwatch() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Stopwatch);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Stopwatch)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      isRunning: false,\n      elapsedTime: 0,\n      previousTime: 0\n    };\n\n    _this.tick = function () {\n      if (_this.state.isRunning) {\n        var now = Date.now();\n\n        _this.setState(function (prevState) {\n          return {\n            previousTime: now,\n            elapsedTime: prevState.elapsedTime + (now - _this.state.previousTime)\n          };\n        });\n      }\n    };\n\n    _this.handleStopwatch = function () {\n      _this.setState(function (prevState) {\n        return {\n          isRunning: !prevState.isRunning\n        };\n      });\n\n      if (!_this.state.isRunning) {\n        _this.setState({\n          previousTime: Date.now()\n        });\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(Stopwatch, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.intervalID = setInterval(function () {\n        return _this2.tick();\n      }, 100);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      // I put this expression in a variable to make the code below cleaner and easier to read\n      var seconds = Math.floor(this.state.elapsedTime / 1000);\n      return React.createElement(\"div\", {\n        className: \"stopwatch\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, \"stopwatch\"), React.createElement(\"span\", {\n        className: \"stopwatch-time\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, seconds), React.createElement(\"button\", {\n        onClick: this.handleStopwatch,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, this.state.isRunning ? 'Stop' : 'Start'), React.createElement(\"button\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, \"Reset\"));\n    }\n  }]);\n\n  return Stopwatch;\n}(Component);\n\nexport default Stopwatch;","map":{"version":3,"sources":["C:\\Users\\martinezma\\Desktop\\Projects\\Learn-React\\scoreboard\\src\\components\\Stopwatch.js"],"names":["React","Component","Stopwatch","state","isRunning","elapsedTime","previousTime","tick","now","Date","setState","prevState","handleStopwatch","intervalID","setInterval","seconds","Math","floor"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;;IAEMC,S;;;;;;;;;;;;;;;;;UAEJC,K,GAAQ;AACNC,MAAAA,SAAS,EAAE,KADL;AAENC,MAAAA,WAAW,EAAE,CAFP;AAGNC,MAAAA,YAAY,EAAE;AAHR,K;;UAURC,I,GAAO,YAAM;AACV,UAAI,MAAKJ,KAAL,CAAWC,SAAf,EAA0B;AACxB,YAAMI,GAAG,GAAGC,IAAI,CAACD,GAAL,EAAZ;;AACA,cAAKE,QAAL,CAAe,UAAAC,SAAS;AAAA,iBAAK;AAC3BL,YAAAA,YAAY,EAAEE,GADa;AAE3BH,YAAAA,WAAW,EAAEM,SAAS,CAACN,WAAV,IAAyBG,GAAG,GAAG,MAAKL,KAAL,CAAWG,YAA1C;AAFc,WAAL;AAAA,SAAxB;AAID;AACH,K;;UAEDM,e,GAAkB,YAAM;AACtB,YAAKF,QAAL,CAAe,UAAAC,SAAS;AAAA,eAAK;AAC3BP,UAAAA,SAAS,EAAE,CAACO,SAAS,CAACP;AADK,SAAL;AAAA,OAAxB;;AAIA,UAAI,CAAC,MAAKD,KAAL,CAAWC,SAAhB,EAA2B;AACzB,cAAKM,QAAL,CAAc;AAAEJ,UAAAA,YAAY,EAAEG,IAAI,CAACD,GAAL;AAAhB,SAAd;AACD;AACF,K;;;;;;;wCAtBmB;AAAA;;AAClB,WAAKK,UAAL,GAAkBC,WAAW,CAAC;AAAA,eAAM,MAAI,CAACP,IAAL,EAAN;AAAA,OAAD,EAAoB,GAApB,CAA7B;AACD;;;6BAsBQ;AAEP;AACA,UAAMQ,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAW,KAAKd,KAAL,CAAWE,WAAX,GAAyB,IAApC,CAAhB;AAEA,aACE;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAEE;AAAM,QAAA,SAAS,EAAC,gBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAmCU,OAAnC,CAFF,EAGE;AAAQ,QAAA,OAAO,EAAE,KAAKH,eAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,KAAKT,KAAL,CAAWC,SAAX,GAAuB,MAAvB,GAAgC,OADpC,CAHF,EAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBANF,CADF;AAUD;;;;EA/CqBH,S;;AAkDxB,eAAeC,SAAf","sourcesContent":["import React, {Component} from 'react';\r\n\r\nclass Stopwatch extends Component {\r\n\r\n  state = {\r\n    isRunning: false,\r\n    elapsedTime: 0,\r\n    previousTime: 0,\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.intervalID = setInterval(() => this.tick(), 100);\r\n  }\r\n\r\n  tick = () => {\r\n     if (this.state.isRunning) {\r\n       const now = Date.now();\r\n       this.setState( prevState => ({\r\n         previousTime: now,\r\n         elapsedTime: prevState.elapsedTime + (now - this.state.previousTime)\r\n       }));\r\n     }\r\n  }\r\n\r\n  handleStopwatch = () => {\r\n    this.setState( prevState => ({\r\n      isRunning: !prevState.isRunning\r\n    }));\r\n\r\n    if (!this.state.isRunning) {\r\n      this.setState({ previousTime: Date.now() });\r\n    }\r\n  }\r\n\r\n  render() {\r\n\r\n    // I put this expression in a variable to make the code below cleaner and easier to read\r\n    const seconds = Math.floor(this.state.elapsedTime / 1000);\r\n\r\n    return (\r\n      <div className='stopwatch'>\r\n        <h2>stopwatch</h2>\r\n        <span className='stopwatch-time'>{ seconds }</span>\r\n        <button onClick={this.handleStopwatch}>\r\n          { this.state.isRunning ? 'Stop' : 'Start' }\r\n        </button>\r\n        <button>Reset</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Stopwatch;"]},"metadata":{},"sourceType":"module"}